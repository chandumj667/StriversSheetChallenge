/*
    Palindrome Partitioning
    Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.

    Note: A palindrome string is a string that reads the same backward as forward.

    Example 1:
    Input: s = “aab”
    Output: [ ["a","a","b"], ["aa","b"] ]
    Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.

    Example 2:
    Input: s = “aabb”
    Output: [ [“a”,”a”,”b”,”b”], [“aa”,”bb”], [“a”,”a”,”bb”], [“aa”,”b”,”b”] ]

    Approach:
        checking from 0th index to last index and taking previous indicies as substring and if that is a palindrome add that sub-string to data structure and increment index if it reaches end return the substrings

        Time complexity:  O((2^n)*k*(n/2))
        Space complexity: O(k*x)
*/

#include<bits/stdc++.h>
using namespace std;

void print(vector<vector<string>>&ans){
    cout << "[" << endl;
    for(auto i:ans){
        cout << "    [";
        for(auto c:i){
            cout <<'"'<< c <<'"' << " ";
        }
        cout << "]";
        cout << endl;
    }
    cout << "]";
}

bool isp(string s, int start, int end){
    while (start <= end){
        if (s[start++] != s[end--])
            return false;
    }
    return true;
}


void output(int index, string s, vector<string> &path,vector<vector<string>> &res){
    if (index == s.size()){
        res.push_back(path);
        return;
    }
    for (int i = index; i < s.size(); ++i){
        if (isp(s, index, i)){
            path.push_back(s.substr(index, i - index + 1));
            output(i + 1, s, path, res);
            path.pop_back();
        }
    }
}


vector<vector<string>> solve(string s){
    vector<vector<string>> res;
    vector<string> path;
    output(0, s, path, res);
    return res;
}


int main(){
    string s;
    cout << "Enter the string: " << endl;
    getline(cin, s);
    vector<vector<string>> ans = solve(s);
    print(ans);
}