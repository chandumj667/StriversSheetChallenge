<<<<<<<<<<<<<<<<<<<<   Creation   >>>>>>>>>>>>>>>>>>>>>>
Creation of the node :

class Node{
    public:
        int data;
        Node *next;
        Node (int val){
            data = val;
            next = NULL;
        }
};


<<<<<<<<<<<<<<<<<<<<   Insertion   >>>>>>>>>>>>>>>>>>>>>>

Input from the user and inserting the nodes using loop
Insertion at end: 

Node *input(){
    int data;
    cout << "Enter -1 to exit : ";
    cin >> data;
    Node *head = NULL;
    Node *tail = NULL;
    while(data!=-1){
        Node *n = new Node(data);
        if(head == NULL){
            head = n;
            tail = n;
        }
        else{
            tail->next = n;
            tail = tail->next;
        }
        cout << "Enter -1 to exit : ";
        cin >> data;
    }
    return head;
}


Insertion at head: 
Node *InsertAtHead(Node *head, int val){
    Node *node = new Node(val);
    if(head == NULL){
        head = node;
    }
    node->next = head;
    head = node;
    return head;
}

Insertion at specific position

Node *insertAtPos(Node *head, int val, int pos){
    if(head == NULL || head->next == NULL)return head;
    Node *node = new Node(val);
    Node *temp = head;
    int cnt =pos-1;
    while(cnt--){
        temp = temp->next;
    }    
    node->next = temp->next;
    temp->next = node;
    return head;
}


<<<<<<<<<<<<<<<<<<<<   Deletion   >>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<   Print or Traverse   >>>>>>>>>>>>>>>>>>>>>>

void print(Node *head){
    Node *temp = head;
    while(temp!=NULL){
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL";
}